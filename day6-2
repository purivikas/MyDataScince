import time , datetime


print ("current year:"), datetime.date.today().strftime("%Y")
print ("current Month:"), datetime.date.today().strftime("%B")

print ("current week:"), datetime.date.today().strftime("%W")
print ("current week day of the week:"), datetime.date.today().strftime("%w")


print ("Day of the Month:", datetime.date.today().strftime("%d"))
print ("Day of the Week:", datetime.date.today().strftime("%A"))

print ("Current data and time :", datetime.datetime.now())
print("another format", datetime.datetime.now().strftime("%d-%M-%Y %H:%M:%S"))



# Time library

print ("time in sencond the epoch : %s" , time.time())
localtime = time.localtime(time.time())
print ("local current time:", localtime)


# Calender


# resolution

print ('Earliest :', datetime.time.min)
print ('Lates :', datetime.time.max)
print ('Resolution :', datetime.time.resolution)


# Creating time out


t = datetime.time(1,2,3)
print (t)

print ('Hours :', t.hour)
print ('Hours :', t.minute)
print ('Hours :', t.second)
print ('Hours :', t.microsecond)
print ('time zone:', t.tzinfo)



# Date Arithimetic

print ('microsecond : ', datetime.timedelta(microseconds=1))
print ('millisecond : ', datetime.timedelta(milliseconds=1))
print ('seconds : ', datetime.timedelta(seconds=1))
print ('Minutes : ', datetime.timedelta(minutes=1))
print ('hours : ', datetime.timedelta(hours=1))
print ('days : ', datetime.timedelta(days=1))
print ('week : ', datetime.timedelta(week=1))


today = datetime.date.today()
print ('Today : ',today)


t1 = datetime.time(12, 55, 0)
print('t1:', t1)
t2 =  datetime.time(13, 5, 0)
print('t2:',t2)

print('t1 < t2', t1 < t2)


d1 = datetime.date.today()
d2 = d1 + datetime.timedelta(days = 5)

print ('d1 > d2 ', d1 > d2)


# Excerice
# implement a profiler that would show the rate of growth
# in compution of sorting a list of N integer .
# the profiler should ouput the following table:
# list_size  , sort_time , suffle_time , total_time
# 1000 , 0.00000001
# 10,000 , 0.00020
# 100,000,000 , 0



# Excerice
# implement a profiler that would show the rate of growth
# in compution of sorting a list of N integer .
# the profiler should ouput the following table:
# list_size  , sort_time , suffle_time , total_time
# 1000 , 0.00000001
# 10,000 , 0.00020
# 100,000,000 , 0

import random
import math

def do_loop(list_size_in):
    l1= range(0, list_size_in)

    t1 = datetime.datetime.now()
    random.shuffle(l1)
    l1.sort()
    t2 = datetime.datetime.now()
    diff_ = t2 - t1
    return diff_


def profile_sorting(iteration_number):

    exection_times = []

    for i in range ( 0 , iteration_number):
        time_ = do_loop(10 * math.pow(10, i))
        exection_times.append(time_)

    return exection_times
